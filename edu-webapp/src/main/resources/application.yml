server:
  port: 8088
  servlet:
    context-path: /edu
    session:
      timeout: 60

spring:
  thymeleaf:
    prefix: classpath:/templates/
  profiles:
    active: dev
  datasource:
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      name: test
      url: jdbc:mysql://localhost:3306/edu_test?useUnicode=true&characterEncoding=UTF-8
      username: root
      password: 123456
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，此处是filter修改的地方
      filters:
      #commons-log.connection-logger-name: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true

#MyBatis
mybatis:
  mapper-locations: classpath:com/gz/edu/model/**/mysql/*.xml  #对应mapper映射xml文件的所在路径
  type-aliases-package: com.gz.edu.model  # 对应实体类的路径

#pagehelper分页插件
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

#activiti工作流
spring.activiti:
  async-executor-activate: false
  database-schema-update: true
  check-process-definitions: false
  process-definition-location-prefix: classpath:/processes/
  history-level: full

# Redis数据库索引（默认为0）
spring.redis:
  database: 0
  # Redis服务器地址
  host: 127.0.0.1
  # Redis服务器连接端口
  port: 6379
  # Redis服务器连接密码（默认为空）
  password: 123redis
  # 连接超时时间（毫秒）
  timeout: 5000
  # 连接池最大连接数（使用负值表示没有限制）
  pool:
    max-active: 8
    # 连接池最大阻塞等待时间（使用负值表示没有限制）
    max-wait: -1
    # 连接池中的最大空闲连接
    max-idle: 8
    # 连接池中的最小空闲连接
    smin-idle: 0

spring.session:
  store-type: none

spring.kafka:
  # 指定kafka 代理地址，可以多个
  bootstrap-servers: 127.0.0.1:9092
  producer:
    retries: 0
    # 每次批量发送消息的数量
    batch-size: 16384
    # 缓存容量
    buffer-memory: 33554432
    # 指定消息key和消息体的编解码方式
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
  consumer:
    # 指定默认消费者group id
    group-id: consumer-tutorial
    auto-commit-interval: 100
    auto-offset-reset: earliest
    enable-auto-commit: true
    # 指定消息key和消息体的编解码方式
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  # 指定listener 容器中的线程数，用于提高并发量
  listener:
    concurrency: 3

